version: '3.7'
services:
  ego-api:
    image: "overture/ego:3.4.0"
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://ego-postgres:5432/ego?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:flyway/sql,classpath:db/migration"
      SPRING_PROFILES: demo, auth
      JWT_DURATIONMS: 1800000 # expire tokens in 30 min for local testing
    expose:
      - "8080"
    ports:
      - "8081:8080"
    depends_on:
      - ego-postgres
  ego-postgres:
    image: postgres:11.1
    environment:
      - POSTGRES_DB=ego
      - POSTGRES_PASSWORD=password
    expose:
      - "5432"
    volumes:
      - "./ego-init:/docker-entrypoint-initdb.d"
    ports:
      - "9444:5432"

  object-storage:
    #NOTE: must use 2018-05-11 version, since the ETag rules are different. 2018 will return the part md5, anything newer will not, and score-server expects etag==md5
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "8085:9000"
  score-server:
    network_mode: "host"
    image: overture/score-server:5.3.0
    environment:
      SPRING_PROFILES_ACTIVE: amazon,collaboratory,prod,secure,jwt
      SERVER_PORT: 8087
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: oicr.icgc.test
      BUCKET_NAME_STATE: oicr.icgc.test
      COLLABORATORY_DATA_DIRECTORY: data
      METADATA_URL: http://localhost:8089
      S3_ENDPOINT:  http://localhost:8085
      S3_ACCESSKEY: minio
      S3_SECRETKEY: minio123
      S3_SIGV4ENABLED: "true"
      AUTH_JWT_PUBLICKEYURL: http://localhost:8081/oauth/token/public_key
      AUTH_SERVER_URL: http://localhost:8081/o/check_api_key/
      AUTH_SERVER_CLIENTID: score
      AUTH_SERVER_CLIENTSECRET: scoresecret
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_SCOPE_DOWNLOAD_SYSTEM: score.READ
      AUTH_SERVER_SCOPE_DOWNLOAD_STUDY_PREFIX: score.
      AUTH_SERVER_SCOPE_DOWNLOAD_STUDY_SUFFIX: .READ
      AUTH_SERVER_SCOPE_UPLOAD_SYSTEM: score.WRITE
      AUTH_SERVER_SCOPE_UPLOAD_STUDY_PREFIX: score.
      AUTH_SERVER_SCOPE_UPLOAD_STUDY_SUFFIX: .WRITE
      SERVER_SSL_ENABLED: "false"
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
      LOGGING_LEVEL_BIO_OVERTURE_SCORE_SERVER: DEBUG
      LOGGING_LEVEL_ORG_APACHE_HTTP_WIRE: DEBUG
      LOGGING_LEVEL_ORG_APACHE_HTTP_HEADERS: DEBUG
      ENDPOINTS_DUMP_ENABLED: "false"
      ENDPOINTS_ENV_ENABLED: "true"
      ENDPOINTS_INFO_ENABLED: "true"
    ports:
      - "8087:8087"
    depends_on:
      - object-storage
      - ego-api
      - ego-postgres

  song-db:
    image: postgres:11.1
    environment:
      POSTGRES_DB: song
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "8432:5432"
    volumes:
      - "./song-db-init:/docker-entrypoint-initdb.d"
  song-server:
    network_mode: "host"
    image: overture/song-server:4.5.0
    environment:
      SERVER_PORT: 8089
      SPRING_PROFILES_ACTIVE: "prod,secure,default,jwt,score-client-cred"
      AUTH_JWT_PUBLICKEYURL: http://localhost:8081/oauth/token/public_key
      AUTH_SERVER_URL: http://localhost:8081/o/check_api_key/
      AUTH_SERVER_CLIENTID: song
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_CLIENTSECRET: songsecret
      AUTH_SERVER_SCOPE_STUDY_PREFIX: song.
      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE
      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE
      SCORE_URL: http://localhost:8087
      SCORE_CLIENTCREDENTIALS_ID: adminId
      SCORE_CLIENTCREDENTIALS_SECRET: adminSecret
      SCORE_CLIENTCREDENTIALS_TOKENURL: http://localhost:8081/oauth/token
      SCORE_CLIENTCREDENTIALS_SYSTEMSCOPE: "score.WRITE"
      MANAGEMENT_SERVER_PORT: 8088
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:8432/song?stringtype=unspecified
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:db/migration"
    ports:
      - "5006:5006"
      - "8089:8089"
    depends_on:
      - song-db
      - ego-api
      - score-server
      - ego-postgres

  muse-db:
    image: postgres:11.1
    environment:
      POSTGRES_DB: muse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"

volumes:
  object-storage-data: {}
